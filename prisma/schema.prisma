// Simplified schema for testing authentication
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  agents        Agent[]
  
  @@map("users")
}

model Agent {
  id               String   @id @default(cuid())
  name             String
  type             String   // trading, content, automation
  personality      String   // conservative, balanced, aggressive, analytical, creative
  goals            String?
  riskTolerance    String   @default("medium") // low, medium, high
  maxBudget        Float    @default(100)
  tradingPairs     String?  // JSON array as string
  socialPlatforms  String?  // JSON array as string  
  automationTasks  String?  // JSON array as string
  status           String   @default("active") // active, paused, stopped
  earnings         Float    @default(0)
  lastActivity     DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("agents")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}